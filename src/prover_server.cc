#include <iostream>
#include <cstdio>
#include <string>

#include <grpc/grpc.h>
#include <grpcpp/server.h>
#include <grpcpp/server_builder.h>
#include <grpcpp/server_context.h>
#include <grpcpp/security/server_credentials.h>

// Include zeth headers
#include "libsnark_helpers/libsnark_helpers.hpp"
#include "circuits/computation.hpp"
#include "circuits/sha256/sha256_ethereum.hpp"
#include "circuit-wrapper.hpp"
//#include "zethConfig.h"

#include "util.hpp"

// Include the file generated by gRPC
#include "prover.grpc.pb.h"

using grpc::Server;
using grpc::ServerBuilder;
using grpc::ServerContext;
using grpc::ServerReader;
using grpc::ServerReaderWriter;
using grpc::ServerWriter;
using grpc::Status;

// Use the Prover service defined in the proto file
using proverpkg::Prover;

// Use the messages defined in the proto file
using proverpkg::EmptyMessage;
using proverpkg::PackedDigest;
using proverpkg::ZethNote;
using proverpkg::JSInput;
using proverpkg::Inputs;
using proverpkg::ProofPublicInputs;
using proverpkg::HexadecimalPointBaseGroup1Affine;
using proverpkg::HexadecimalPointBaseGroup2Affine;
using proverpkg::ExtendedProof;

typedef libff::default_ec_pp ppT;
typedef libff::Fr<ppT> FieldT;
typedef sha256_ethereum<FieldT> HashT;

class ProverImpl final : public Prover::Service {
  Status RunSetup(
	ServerContext* context, 
	const EmptyMessage* request,
	EmptyMessage* response
  ) override {
    std::cout << "Receive the request to run the setup: " << std::endl;

    ppT::init_public_params();
    libzeth::CircuitWrapper<1, 1> prover;
    libsnark::r1cs_ppzksnark_keypair<ppT> keypair = prover.generate_trusted_setup();

    return Status::OK;
  }
  
  Status Prove(
	ServerContext* context,
	const Inputs* inputs,
	ExtendedProof* proof
  ) override {
    std::cout << "Receive the request to run the proof on inputs: " << std::endl;

    // TODO:
    std::string root = inputs->root();
    std::vector<bool> digest = hexadecimal_digest_to_binary_vector(root);
    std::cout << "Inputs [root in hex] " << root << std::endl;
    std::cout << "Inputs [root in binary] " << std::endl;
    for(int i = 0; i < digest.size(); i++) {
      std::cout << digest[i] << ", ";
    }
    // myCustomProveFunction()

    return Status::OK;
  }
};

void ServerStartMessage() {
  std::string copyright = "Copyright (c) 2015-2019 Clearmatics Technologies Ltd";
  std::string license = "SPDX-License-Identifier: LGPL-3.0+";
  std::string project = "R&D Department: PoC for Zerocash on Ethereum/Autonity";
  std::string version = "Version [TBD Use the zethConfig]";
  std::string warning = "**WARNING:** This code is a research-quality proof of concept, DO NOT USE in production!";

  std::cout << "\n ===================================================== " << std::endl;
  std::cout << copyright << std::endl;
  std::cout << license << std::endl;
  std::cout << project << std::endl;
  std::cout << version << std::endl;
  std::cout << warning << std::endl;
  std::cout << " ===================================================== " << std::endl;
}

void RunServer() {
  // Listen for incoming connections on 0.0.0.0:50051
  std::string server_address("0.0.0.0:50051");
  ProverImpl service;

  ServerBuilder builder;

  // Listen on the given address without any authentication mechanism.
  builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());

  // Register "service" as the instance through which we'll communicate with
  // clients. In this case it corresponds to an *synchronous* service.
  builder.RegisterService(&service);

  // Finally assemble the server.
  std::unique_ptr<Server> server(builder.BuildAndStart());
  std::cout << "Server listening on " << server_address << std::endl;

  // Wait for the server to shutdown. Note that some other thread must be
  // responsible for shutting down the server for this call to ever return.
  ServerStartMessage();
  server->Wait();
}

int main(int argc, char** argv) {
  RunServer();

  return 0;
}
