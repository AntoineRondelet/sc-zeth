#include <algorithm>
#include <chrono>
#include <cmath>
#include <iostream>
#include <memory>
#include <string>

#include <grpc/grpc.h>
#include <grpcpp/server.h>
#include <grpcpp/server_builder.h>
#include <grpcpp/server_context.h>
#include <grpcpp/security/server_credentials.h>

// Include the file generated by gRPC
#include "prover.grpc.pb.h"

using grpc::Server;
using grpc::ServerBuilder;
using grpc::ServerContext;
using grpc::ServerReader;
using grpc::ServerReaderWriter;
using grpc::ServerWriter;
using grpc::Status;

// Use the Prover service defined in the proto file
using proverpkg::Prover;

// Use the messages defined in the proto file
using proverpkg::EmptyMessage;
using proverpkg::PackedDigest;
using proverpkg::ZethNote;
using proverpkg::JSInput;
using proverpkg::Inputs;
using proverpkg::ProofPublicInputs;
using proverpkg::HexadecimalPointBaseGroup1Affine;
using proverpkg::HexadecimalPointBaseGroup2Affine;
using proverpkg::ExtendedProof;

class ProverImpl final : public Prover::Service {

  Status RunSetup(ServerContext* context, const EmptyMessage* request,
                    EmptyMessage* response) override {
    std::cout << "Receive the request to run the setup: " << std::endl;
    // myCustomSetupFunction()
    return Status::OK;
  }
  
  Status Prove(ServerContext* context, const Inputs* inputs,
                    ExtendedProof* proof) override {
    std::cout << "Receive the request to run the proof on inputs: " << std::endl;
    // std::cout << "Inputs [root] " << inputs->root() << std::endl;
    // myCustomProveFunction()
    return Status::OK;
  }
};

void RunServer() {
  // Listen for incoming connections on 0.0.0.0:50051
  std::string server_address("0.0.0.0:50051");
  ProverImpl service;

  ServerBuilder builder;
  // Listen on the given address without any authentication mechanism.
  builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());
  // Register "service" as the instance through which we'll communicate with
  // clients. In this case it corresponds to an *synchronous* service.
  builder.RegisterService(&service);
  // Finally assemble the server.
  std::unique_ptr<Server> server(builder.BuildAndStart());
  std::cout << "Server listening on " << server_address << std::endl;

  // Wait for the server to shutdown. Note that some other thread must be
  // responsible for shutting down the server for this call to ever return.
  server->Wait();
}

int main(int argc, char** argv) {
  RunServer();

  return 0;
}
