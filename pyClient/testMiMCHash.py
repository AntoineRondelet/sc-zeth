# Benchmarking Gas cost for different MiMC exponents
import zethContracts
import math

from web3 import Web3, HTTPProvider, IPCProvider, WebsocketProvider
w3 = Web3(HTTPProvider("http://localhost:8545"))

# compile MiMC, MerkleeTree contracts
mimc_interface, tree_interface = zethContracts.compile_util_contracts()

# deploy MimC contract
mimc_instance, mimc_address = zethContracts.deploy_mimc_contract(mimc_interface)

# deploy MerkleTreeMiMCHash contract
tree_instance = zethContracts.deploy_tree_contract(tree_interface, 3, mimc_address)


# Test vector generated by using pyClient/zethMimc.py
m = 3703141493535563179657531719960160174296085208671919316200479060314459804651
iv = 15683951496311901749339509118960676303290224812129752890706581988986633412003
out = 9752224247188495099750912302515717264367216488669064658605886536850728950310

# Test vectors generated by using pyClient/zethMimc.py
root = 7869605176732140238749902301208502935283365703933207336566678304125280449997
level_1 = 12921174256558802998502901713017001042888668132477819680769384235114593268031
level_2 = 2369491469498662726899527952320763476550437823075807989318215132860075588063


if __name__ == "__main__":

  # MiMC contract unit test
  hash = zethContracts.mimcHash(mimc_instance,
  m.to_bytes(32, byteorder="big"), iv.to_bytes(32, byteorder="big"), b'clearmatics_iv')

  assert int.from_bytes(hash, byteorder="big") == out
  "Hash is NOT correct"

  # MerkleTreeMiMCHash of depth 3 unit test
  tree = zethContracts.getTree(tree_instance)

  root_recovered = zethContracts.getRoot(tree_instance)

  # Leaves
  for i in range(7,15):
    assert int.from_bytes(tree[i], byteorder="big") == 0
    "MerkleTree Error Leaves"

  # Level 2
  for i in range(3, 7):
    assert int.from_bytes(tree[i], byteorder="big") == level_2
    "MerkleTree Error Level 2"

  # Level 1
  for i in range(1, 3):
    assert int.from_bytes(tree[i], byteorder="big") == level_1
    "MerkleTree Error Level 1"

  # Root
  assert int.from_bytes(tree[0], byteorder="big") == root
  "MerkleTree Error Root"

  # Recovered root
  assert int.from_bytes(root_recovered, byteorder="big") == root
  "MerkleTree Error Computed Root"

  print("All test passed")
